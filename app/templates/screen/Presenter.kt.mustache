package {{package}}.ui.{{screenLowerCase}}

import android.content.Context
import android.os.Bundle
import android.os.Parcelable
import {{package}}.util.RxUtils
import org.parceler.Parcel
import org.parceler.Parcels
import rx.subscriptions.CompositeSubscription

class {{screenUpperCamel}}Presenter(private val context: Context) {

    interface {{screenUpperCamel}}ViewContract

    @Parcel(Parcel.Serialization.BEAN)
    class State {
        var initialized = false
    }

    private lateinit var subscriptions: CompositeSubscription
    private var view: {{screenUpperCamel}}ViewContract? = null
    private var state = State()

    fun setView(view: {{screenUpperCamel}}ViewContract) {
        this.view = view
    }

    fun saveState(bundle: Bundle) {
        bundle.putParcelable(EXTRA_STATE, Parcels.wrap<State>(state))
    }

    fun restoreState(bundle: Bundle?) {
        if (bundle != null && bundle.containsKey(EXTRA_STATE)) {
            state = Parcels.unwrap<State>(bundle.getParcelable<Parcelable>(EXTRA_STATE))
        }
    }

    fun onResume() {
        subscriptions = RxUtils.getNewCompositeSubIfUnsubscribed(subscriptions)
        if (!state.initialized) {
            state.initialized = true
        }
    }

    fun onPause() {
        RxUtils.unsubscribeIfNotNull(subscriptions)
    }

    companion object {
        private val EXTRA_STATE = "{{screenUpperCamel}}PresenterState"
    }
}
