buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.14.7'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'

        classpath 'com.github.ben-manes:gradle-versions-plugin:0.7'
    }
}

apply plugin: 'com.github.ben-manes.versions'

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'crashlytics'

apply plugin: 'findbugs'
apply plugin: 'pmd'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.xml'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.properties'
        exclude 'META-INF/maven/com.squareup/otto/pom.xml'
        exclude 'META-INF/maven/com.squareup/otto/pom.properties'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    defaultConfig {
        applicationId "com.mycompany.myapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        resConfigs "en"
        resConfigs "nodpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"

        buildConfigField "String", "VERSION_FINGERPRINT", rootProject.ext.versionFingerprint

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 
            'proguard-rules.pro',
            '../config/proguard/android-support-v4.pro',
            '../config/proguard/butterknife.pro',
            '../config/proguard/crashlytics.pro',
            '../config/proguard/google-play-services.pro',
            '../config/proguard/parceler.pro',
            '../config/proguard/okhttp.pro',
            '../config/proguard/okio.pro',
            '../config/proguard/otto.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            apply from: rootProject.file('distribution/keys/sample.gradle')

            storeFile rootProject.file(sampleKeystore)
            storePassword sampleKeystorePassword
            keyAlias sampleKeyAlias
            keyPassword sampleKeyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError true
        lintConfig file("${project.rootDir}/config/lint/lint.xml")
        htmlReport true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.libraryAndroidSupport
    compile rootProject.ext.libraryAndroidAppCompat
    compile rootProject.ext.libraryGooglePlayServices

    compile 'com.jakewharton:butterknife:6.0.0'

    compile "org.parceler:parceler-api:0.2.15"
    provided ("org.parceler:parceler:0.2.15") {
        exclude module: 'commons-logging'
    }

    compile 'com.squareup:otto:1.3.6'

    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'

    compile 'com.crashlytics.android:crashlytics:1.1.13'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"

    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.0'
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    excludeFilter file("${project.rootDir}/config/findbugs/exclude.xml")
    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ruleSets = [] // See http://sourceforge.net/p/pmd/discussion/188193/thread/6e9c6017/ for why this is needed...
    source = fileTree('src/main/java/')
    exclude '**/gen/**'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
