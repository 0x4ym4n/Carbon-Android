buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'

        classpath 'de.felixschulze.gradle:gradle-spoon-plugin:2.6.1'
        classpath 'com.squareup.spoon:spoon-runner:1.2.1'

        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    }

    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

apply plugin: 'com.github.ben-manes.versions'

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'de.felixschulze.gradle.spoon'

apply plugin: 'findbugs'
apply plugin: 'pmd'

repositories {
    // Crashlytics
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.xml'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.properties'
        exclude 'META-INF/maven/com.squareup/otto/pom.xml'
        exclude 'META-INF/maven/com.squareup/otto/pom.properties'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    defaultConfig {
        applicationId "com.mycompany.myapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        buildConfigField "String", "VERSION_FINGERPRINT", rootProject.ext.versionFingerprint

        proguardFile getDefaultProguardFile('proguard-android.txt')
        proguardFile 'proguard-rules.pro'
        proguardFile '../config/proguard/android-support-v4.pro'
        proguardFile '../config/proguard/butterknife.pro'
        proguardFile '../config/proguard/crashlytics.pro'
        proguardFile '../config/proguard/google-play-services.pro'
        proguardFile '../config/proguard/jackson.pro'
        proguardFile '../config/proguard/okhttp.pro'
        proguardFile '../config/proguard/okio.pro'
        proguardFile '../config/proguard/otto.pro'
        proguardFile '../config/proguard/parceler.pro'
        proguardFile '../config/proguard/retrofit.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            apply from: rootProject.file('distribution/keys/sample.gradle')

            storeFile rootProject.file(sampleKeystore)
            storePassword sampleKeystorePassword
            keyAlias sampleKeyAlias
            keyPassword sampleKeyPassword
        }
    }

    productFlavors {
        app {
            buildConfigField "String", "VERSION_FINGERPRINT", rootProject.ext.versionFingerprint
        }

        integration {
            buildConfigField "String", "VERSION_FINGERPRINT", "\"INTEGRATION\""
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError true
        lintConfig file("lint.xml")
        htmlReport true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Android/Google libraries
    compile rootProject.ext.libraryAndroidSupport
    compile rootProject.ext.libraryAndroidAppCompat
    compile rootProject.ext.libraryAndroidRecyclerView
    compile rootProject.ext.libraryAndroidCardView
    compile rootProject.ext.libraryAndroidAppCompat
    compile rootProject.ext.libraryGooglePlayServices
    compile rootProject.ext.libraryAndroidSupportAnnotations
    compile rootProject.ext.libraryAndroidDesignSupport

    // Networking - HTTP
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'

    // Networking - REST
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'com.squareup.retrofit:converter-jackson:2.0.0-beta2'

    // Networking - Encoding
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.3'

    // App architecture - RxJava
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'

    // App architecture - Dagger 2
    compile 'com.google.dagger:dagger:2.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'javax.annotation:jsr250-api:1.0'

    // Code generators - Butterknife
    compile 'com.jakewharton:butterknife:7.0.1'

    // Code generators - Parceler
    compile "org.parceler:parceler-api:1.0.4"
    apt ("org.parceler:parceler:1.0.4") {
        exclude module: 'commons-logging'
    }

    // Monitoring - Timber (logging)
    compile 'com.jakewharton.timber:timber:4.1.0'

    // Monitoring - Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true
    }

    // Unit test
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    // Integration test
    integrationCompile 'org.mockito:mockito-core:1.10.19'
    integrationCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    integrationCompile 'com.google.dexmaker:dexmaker:1.2'

    // Instrumentation test
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    androidTestCompile 'com.squareup.spoon:spoon-client:1.2.1'
}

configurations {
    testCompile.exclude group: 'com.android.support', module: 'support-annotations'
    androidTestCompile.exclude group: 'com.android.support', module: 'support-v4'
}

// Due to incompatible version resolutions across build variants/configs/etc
configurations.all {
    resolutionStrategy.force "org.hamcrest:hamcrest-core:1.3",
            "com.android.support:support-annotations:${rootProject.ext.supportVersion}"
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    excludeFilter file("${project.rootDir}/config/findbugs/exclude.xml")
    classes = fileTree('build/intermediates/classes/app/debug/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ruleSets = [] // See http://sourceforge.net/p/pmd/discussion/188193/thread/6e9c6017/ for why this is needed...
    source = fileTree('src/main/java/')
    exclude '**/gen/**'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spoon {
    teamCityLog = true
    failIfNoDeviceConnected = false
}
