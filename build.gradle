buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}


allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }

    // Automatically also pull down javadocs and sources (if available)
    apply plugin: 'idea'
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    // Verbose output for usage of deprecated APIs
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

// Disable predexing (enable on build servers)
project.ext.preDexLibs = !project.hasProperty('disablePreDex')
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

// Prevent wildcard dependencies
allprojects {
    afterEvaluate { project ->
        project.configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                if (requested.version.contains('+')) {
                    throw new GradleException("Wildcard dependency forbidden: ${requested.group}:${requested.name}:${requested.version}")
                }
            }
        }
    }
}

ext {
    // Build (this implementation assumes values are being provided as arguments, perhaps by a build server)
    appVersion = "1.0"
    versionFingerprint = project.hasProperty("fingerprint") ? ("\"" + fingerprint + "\"") : "\"DEV\""
    versionCode = project.hasProperty("buildNumber") ? Integer.parseInt(buildNumber) : 1
    versionName = "$appVersion b$versionCode"

    // Build settings that are likely to be reused across different modules
    compileSdkVersion = 22
    buildToolsVersion = "22.0.1"
    minSdkVersion = 16
    targetSdkVersion = 22

    // Libraries are are likely to be reused across different modules
    supportVersion = '22.2.1'
    libraryAndroidSupport = "com.android.support:support-v4:$supportVersion"
    libraryAndroidAppCompat = "com.android.support:appcompat-v7:$supportVersion"
    libraryAndroidRecyclerView = "com.android.support:recyclerview-v7:$supportVersion"
    libraryAndroidCardView = "com.android.support:cardview-v7:$supportVersion"
    libraryAndroidSupportAnnotations = "com.android.support:support-annotations:$supportVersion"
    libraryAndroidDesignSupport = "com.android.support:design:$supportVersion"

    playServicesVersion = '7.5.0'
    libraryGooglePlayServices = "com.google.android.gms:play-services-base:$playServicesVersion"
}

evaluationDependsOnChildren();
task allChecks() {
    def appProject = subprojects.find { project -> 'app' == project.name }

    dependsOn appProject.getTasksByName('findbugs', true)
    dependsOn appProject.getTasksByName('pmd', true)
    dependsOn appProject.getTasksByName('lint', true)
    dependsOn appProject.getTasksByName('testAppDebug', true)
    dependsOn appProject.getTasksByName('spoonIntegrationDebugAndroidTest', true)
}

task continuousIntegration() {
    def appProject = subprojects.find { project -> 'app' == project.name }

    dependsOn allChecks
    dependsOn appProject.getTasksByName('assembleAppRelease', true)
}